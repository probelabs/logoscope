name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      ref:
        description: 'Tag or ref to build (e.g., v0.1.0)'
        required: true

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: exe

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Build
        run: |
          cargo build --manifest-path logoscope/Cargo.toml --release --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          set -euo pipefail
          BIN_NAME=logoscope
          OUTDIR=logoscope/target/${{ matrix.target }}/release
          ART_BASE=${BIN_NAME}-${{ matrix.target }}
          mkdir -p dist
          if [ "${{ matrix.archive }}" = "exe" ]; then
            cp -f ${OUTDIR}/${BIN_NAME}.exe dist/${ART_BASE}.exe
          else
            tar -C ${OUTDIR} -czf dist/${ART_BASE}.tar.gz ${BIN_NAME}
          fi
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            dist/*
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm-publish:
    name: Publish @logoscope/cli to npm
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Update package.json version from tag
        working-directory: npm
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG_NAME="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref_name }}"
          VERSION="${TAG_NAME#v}"
          echo "Tag: $TAG_NAME"
          echo "Version: $VERSION"
          
          # Update package.json with the version from tag
          npm version "$VERSION" --no-git-tag-version --allow-same-version
          
          # Verify the update
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Updated package.json version: $PKG_VERSION"
          
          if [[ "$PKG_VERSION" != "$VERSION" ]]; then
            echo "Failed to update package.json version" >&2
            exit 1
          fi

      - name: Install dependencies
        working-directory: npm
        run: npm install --no-audit --no-fund

      - name: Publish to npm
        working-directory: npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --access public
